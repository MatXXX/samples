

module AbsGram where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
newtype Builtin = Builtin String deriving (Eq, Ord, Show, Read)
data Program = Progra [Stmt]
  deriving (Eq, Ord, Show, Read)

data IdentAll
    = IdentAllD IdentDecl
    | IdentAllBuiltin IdentNoDecl
    | IdentAllField IdentField
  deriving (Eq, Ord, Show, Read)

data IdentDecl = IdentDecl Ident
  deriving (Eq, Ord, Show, Read)

data IdentNoDecl = IdentBuiltin Builtin
  deriving (Eq, Ord, Show, Read)

data IdentField = IdentField IdentDecl [StructField]
  deriving (Eq, Ord, Show, Read)

data StructField = StructField IdentDecl
  deriving (Eq, Ord, Show, Read)

data Stmt
    = StmtEmpty
    | StmtNoBlock StmtNB
    | StmtBlock Block
    | StmtCond StmtCond
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data StmtNB
    = AssDecl IdentDecl Expr
    | AssField IdentField Expr
    | Alias IdentDecl Type
    | Ret Expr
    | VRet
    | SExp Expr
    | Decl IdentDecl Type
    | DeclInit IdentDecl Expr
    | DeclInitType IdentDecl Type Expr
    | StructDecl IdentDecl [StructFieldDecl]
  deriving (Eq, Ord, Show, Read)

data StructFieldDecl = StructFieldDecl IdentDecl Type
  deriving (Eq, Ord, Show, Read)

data StmtCond
    = Cond Expr [Stmt] [CondElif]
    | CondElse Expr [Stmt] [CondElif] [Stmt]
    | While Expr [Stmt]
  deriving (Eq, Ord, Show, Read)

data CondElif = CondElif Expr [Stmt]
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Str
    | Bool
    | FType Type [FTypeArg]
    | FVType [FTypeArg]
    | StructType IdentDecl
    | None
    | BuiltinFuncType String
  deriving (Eq, Ord, Show, Read)

data FTypeArg = FTypeArg Type | FTypeArgRef Type
  deriving (Eq, Ord, Show, Read)

data EStructNamedF = EStructNamedF IdentDecl Expr
  deriving (Eq, Ord, Show, Read)

data Arg = Arg IdentDecl FTypeArg
  deriving (Eq, Ord, Show, Read)

data Expr
    = EIdent IdentAll
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Expr [Expr]
    | EString String
    | EStruct IdentDecl [Expr]
    | EStructNamed IdentDecl [EStructNamedF]
    | EFunc Type [Arg] [Stmt]
    | EVFunc [Arg] [Stmt]
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

